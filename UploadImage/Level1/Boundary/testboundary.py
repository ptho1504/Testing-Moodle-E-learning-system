# Generated by Selenium IDE
# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import os 
import unittest
import csv
import time
import re



def mb_to_bytes(mb):
    return int(mb) * 1024 * 1024

def kb_to_bytes(mb):
    return int(mb) * 1024

def bytes_to_bytes(mb):
    return int(mb) 

class TestBoundary():
    
  def set_up_drive(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
    
    # Get
    self.driver.get("https://sandbox.moodledemo.net/")
    self.driver.implicitly_wait(10)
    self.driver.set_window_size(1520, 816)
    # Login and change language
    self.driver.find_element(By.CSS_SELECTOR, ".langbutton").click()
    # Some time, when i use moodle, it change to another version 
    # self.driver.find_element(By.CSS_SELECTOR, "ul.navbar-nav > li:last-child").click()
    self.driver.find_element(By.CSS_SELECTOR, ".dropdown-item:nth-child(102)").click()
    self.driver.find_element(By.LINK_TEXT, "Đăng nhập").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login-wrapper").click()
    self.driver.find_element(By.ID, "username").send_keys("student")
    self.driver.find_element(By.ID, "password").send_keys("sandbox")
    self.driver.find_element(By.ID, "password").send_keys(Keys.ENTER)
    
    time.sleep(5)
    # User Information
    self.driver.find_element(By.CSS_SELECTOR, ".userbutton").click()
    self.driver.find_element(By.LINK_TEXT, "Hồ sơ").click()
    self.driver.find_element(By.LINK_TEXT, "Sửa hồ sơ cá nhân").click()
    self.driver.implicitly_wait(10)
    self.driver.find_element(By.ID, "collapseElement-0").click()
    
    
    
  def teardown_method(self):
    self.driver.quit()
  
  def TakeMB(self, fakeFileImgSize):
      match = re.search(r'(\d+)\s*(\w+)', fakeFileImgSize)
      if match:
        size = int(match.group(1))
        unit = match.group(2)
        
        size_unit_tuple = (size, unit)
        return size_unit_tuple
      else:
         print("No numeric value found in the string")
  
  def doOutLeft(self, filepath, filename):
    time.sleep(5)
    self.driver.find_element(By.CSS_SELECTOR, ".fa-file-o").click()
    self.driver.find_element(By.LINK_TEXT, "Tải lên một tài liệu").click()
    
    time.sleep(5)
    element = self.driver.find_element(By.NAME, "repo_upload_file")
    element.send_keys(filepath)
    
    time.sleep(10)
    self.driver.find_element(By.XPATH, "(//button[contains(text(),'Đăng tải tệp này')])[1]").click()
    time.sleep(2)
    result =  self.driver.find_element(By.CSS_SELECTOR, ".moodle-exception-message").text 
    self.driver.implicitly_wait(10)
    # ActionChains(self.driver).move_to_element(result)
    assert result  == f"The file '{filename}' is either empty or a folder. To upload folders zip them first."
    
    
    
      
  
  def doNormal(self, filepath):
    self.driver.find_element(By.CSS_SELECTOR, ".fa-file-o").click()
    self.driver.find_element(By.LINK_TEXT, "Tải lên một tài liệu").click()
    
    time.sleep(5)
    element = self.driver.find_element(By.NAME, "repo_upload_file")
    element.send_keys(filepath)
    self.driver.implicitly_wait(20)
    
    time.sleep(10)
    self.driver.find_element(By.XPATH, "(//button[contains(text(),'Đăng tải tệp này')])[1]").click()
    self.driver.find_element(By.XPATH, "//input[@id='id_submitbutton']").click()     
  
    time.sleep(10)
    assert self.driver.find_element(By.CSS_SELECTOR, ".alert.alert-success span").text == "×"
    self.vars["myVar"] = self.driver.execute_script("const divElement = document.querySelector(\'.alert.alert-success.alert-block.fade.in.alert-dismissible\');const changesSavedText = divElement.textContent.trim(); return changesSavedText;")
    expected = "Đã lưu các thay đổi\n    \n        ×\n        Bỏ qua thông báo này"
    assert self.vars["myVar"] == expected
    
  def testBoundary(self):
    count = 0
    
    with open("./Boundary.csv", 'r') as file:
        csvFile = csv.reader(file)
        
        for row in csvFile:
            # print (row)
            if count != 0:
                self.set_up_drive()
                file_path = os.getcwd()
                file_path = file_path.replace("\Level1\Boundary", f"\FakeData\{row[2]}")
                # print(file_path)
                # fakeFileImg = open(file_path,"r")
                # print(row[3])
                (size, unit_size) = self.TakeMB(row[3])
                
                # print(size, unit_size)
                
                
                range_start = mb_to_bytes(0)
                range_end = mb_to_bytes(256)
                
                
                
                if unit_size == "bytes":
                    size_in_bytes = size
                    # Check size in (0, 255MB)
                    if range_start < size_in_bytes <= range_end:
                        print(f"File size {(size,unit_size)} is within the range (0, 256 MB)")
                        self.doNormal(file_path)
                    elif size_in_bytes <= range_start:
                        self.doOutLeft(file_path, row[2])
                elif unit_size == "KB":
                    size_in_bytes = kb_to_bytes(size)
                    # Check size in (0, 255MB)
                    if range_start < size_in_bytes <= range_end:
                        print(f"File size {(size,unit_size)} is within the range (0, 256 MB)")
                        self.doNormal(file_path)
                    elif size_in_bytes <= range_start:
                        self.doOutLeft(file_path,row[2])
                elif unit_size == "MB":
                    size_in_bytes = mb_to_bytes(size)
                    # Check size in (0, 255MB)
                    if range_start < size_in_bytes <= range_end:
                        print(f"File size {(size,unit_size)} is within the range (0, 256 MB)")
                        self.doNormal(file_path)
                    elif size_in_bytes <= range_start:
                        self.doOutLeft(file_path, row[2])    
                
                time.sleep(5)
                self.teardown_method()
                
                
                print(f"Test {count}: Pass")
                time.sleep(10)
                
            count += 1

  
if __name__ == "__main__":
  unittest.main(warnings='ignore')